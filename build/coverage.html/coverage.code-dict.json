{"/home/travis/build/npmtest/node-npmtest-nfe-io/test.js":"/* istanbul instrument in package npmtest_nfe_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nfe-io/lib.npmtest_nfe_io.js":"/* istanbul instrument in package npmtest_nfe_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nfe_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nfe_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nfe-io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nfe-io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nfe_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nfe_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nfe_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nfe_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nfe_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nfe_io.__dirname + '/lib.npmtest_nfe_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/nfe.js":"'use strict';\r\n\r\nNfe.DEFAULT_HOST = 'api.nfe.io';\r\nNfe.DEFAULT_PORT = '443';\r\nNfe.DEFAULT_PROTOCOL = Nfe.DEFAULT_PORT === '443' ? 'https' : 'http';\r\nNfe.DEFAULT_BASE_PATH = '/v1/';\r\nNfe.DEFAULT_API_VERSION = null;\r\n\r\n// Use node's default timeout:\r\nNfe.DEFAULT_TIMEOUT = require('http').createServer().timeout;\r\n\r\nNfe.PACKAGE_VERSION = require('../package.json').version;\r\n\r\nNfe.USER_AGENT = {\r\n  bindings_version: Nfe.PACKAGE_VERSION,\r\n  lang: 'node',\r\n  lang_version: process.version,\r\n  platform: process.platform,\r\n  publisher: 'nfe',\r\n  uname: null\r\n};\r\n\r\nNfe.USER_AGENT_SERIALIZED = null;\r\n\r\nvar exec = require('child_process').exec;\r\n\r\nvar resources = {\r\n  \r\n  Companies: require('./resources/Companies'),\r\n  Webhooks: require('./resources/Webhooks'),\r\n    \r\n  LegalPeople: require('./resources/LegalPeople'),\r\n  NaturalPeople: require('./resources/NaturalPeople'),\r\n  \r\n  ServiceInvoices: require('./resources/ServiceInvoices')\r\n  \r\n};\r\n\r\nNfe.baseResource = require('./BaseResource');\r\nNfe.resources = resources;\r\n\r\nfunction Nfe(key, version) {\r\n\r\n  if (!(this instanceof Nfe)) {\r\n    return new Nfe(key, version);\r\n  }\r\n\r\n  this._api = {\r\n    auth: null,\r\n    host: Nfe.DEFAULT_HOST,\r\n    protocol: Nfe.DEFAULT_PROTOCOL,\r\n    port: Nfe.DEFAULT_PORT,\r\n    basePath: Nfe.DEFAULT_BASE_PATH,\r\n    version: Nfe.DEFAULT_API_VERSION,\r\n    timeout: Nfe.DEFAULT_TIMEOUT,\r\n    dev: false\r\n  };\r\n\r\n  this._prepResources();\r\n  this.setApiKey(key);\r\n  this.setApiVersion(version);\r\n}\r\n\r\nNfe.prototype = {\r\n\r\n  setHost: function(host, port, protocol) {\r\n    this._setApiField('host', host);\r\n    if (port) this.setPort(port);\r\n    if (protocol) this.setProtocol(protocol);\r\n  },\r\n\r\n  setProtocol: function(protocol) {\r\n    this._setApiField('protocol', protocol.toLowerCase());\r\n  },\r\n\r\n  setPort: function(port) {\r\n    this._setApiField('port', port);\r\n  },\r\n\r\n  setApiVersion: function(version) {\r\n    if (version) {\r\n      this._setApiField('version', version);\r\n    }\r\n  },\r\n\r\n  setApiKey: function(key) {\r\n    if (key) {\r\n      this._setApiField(\r\n        'auth',\r\n        'Basic ' + new Buffer(key)\r\n        // 'Basic ' + new Buffer(key + ':').toString('base64')\r\n      );\r\n    }\r\n  },\r\n\r\n  setTimeout: function(timeout) {\r\n    this._setApiField(\r\n      'timeout',\r\n      timeout == null ? Nfe.DEFAULT_TIMEOUT : timeout\r\n    );\r\n  },\r\n\r\n  _setApiField: function(key, value) {\r\n    this._api[key] = value;\r\n  },\r\n\r\n  getApiField: function(key) {\r\n    return this._api[key];\r\n  },\r\n\r\n  getConstant: function(c) {\r\n    return Nfe[c];\r\n  },\r\n\r\n  getClientUserAgent: function(cb) {\r\n    if (Nfe.USER_AGENT_SERIALIZED) {\r\n      return cb(Nfe.USER_AGENT_SERIALIZED);\r\n    }\r\n    exec('uname -a', function(err, uname) {\r\n      Nfe.USER_AGENT.uname = uname || 'UNKNOWN';\r\n      Nfe.USER_AGENT_SERIALIZED = JSON.stringify(Nfe.USER_AGENT);\r\n      cb(Nfe.USER_AGENT_SERIALIZED);\r\n    });\r\n  },\r\n\r\n  _prepResources: function() {\r\n    for (var name in resources) {\r\n      this[\r\n        name[0].toLowerCase() + name.substring(1)\r\n      ] = new resources[name](this);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = Nfe;\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/resources/Companies.js":"'use strict';\r\n\r\nvar BaseResource = require('../BaseResource');\r\nvar restMethod = BaseResource.method;\r\n\r\nmodule.exports = BaseResource.extend({\r\n  \r\n  path: '/companies',\r\n  \r\n  create: restMethod({\r\n    method: 'POST'\r\n  }),\r\n\r\n  list: restMethod({\r\n    method: 'GET'\r\n  }),\r\n\r\n  retrieve: restMethod({\r\n    method: 'GET',\r\n    path: '/{id}',\r\n    urlParams: ['id']\r\n  }),\r\n\r\n  update: restMethod({\r\n    method: 'PUT',\r\n    path: '{id}',\r\n    urlParams: ['id']\r\n  }),\r\n\r\n  // Avoid 'delete' keyword in JS\r\n  remove: restMethod({\r\n    method: 'DELETE',\r\n    path: '{id}',\r\n    urlParams: ['id']\r\n  }),\r\n    \r\n  uploadCertificate: restMethod({\r\n    method: 'POST',\r\n    path: '{id}/certificate',\r\n    urlParams: ['id']\r\n  })\r\n\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/BaseResource.js":"'use strict';\r\n\r\nvar constants = require('constants');\r\nvar http = require('http');\r\nvar https = require('https');\r\nvar path = require('path');\r\nvar when = require('when');\r\n\r\nvar utils = require('./utils');\r\nvar Error = require('./Error');\r\n\r\nvar hasOwn = {}.hasOwnProperty;\r\n\r\n// Provide extension mechanism for NFe.io Resource Sub-Classes\r\nNfeResource.extend = utils.protoExtend;\r\n\r\n// Expose method-creator & prepared (basic) methods\r\nNfeResource.method = require('./BaseResource.Method');\r\n\r\n/**\r\n * Encapsulates request logic for a NFe.io Resource\r\n */\r\nfunction NfeResource(client, urlData) {\r\n\r\n  this._client = client;\r\n  this._urlData = urlData || {};\r\n\r\n  this.basePath = utils.makeURLInterpolator(this._client.getApiField('basePath'));\r\n  this.path = utils.makeURLInterpolator(this.path);\r\n\r\n  this.initialize.apply(this, arguments);\r\n\r\n}\r\n\r\nNfeResource.prototype = {\r\n\r\n  path: '',\r\n\r\n  initialize: function() {},\r\n\r\n  createFullPath: function(commandPath, urlData) {\r\n    return path.join(\r\n      this.basePath(urlData),\r\n      this.path(urlData),\r\n      typeof commandPath == 'function' ?\r\n        commandPath(urlData) : commandPath\r\n    ).replace(/\\\\/g, '/'); // ugly workaround for Windows\r\n  },\r\n\r\n  createUrlData: function() {\r\n    var urlData = {};\r\n    // Merge in baseData\r\n    for (var i in this._urlData) {\r\n      if (hasOwn.call(this._urlData, i)) {\r\n        urlData[i] = this._urlData[i];\r\n      }\r\n    }\r\n    return urlData;\r\n  },\r\n\r\n  createDeferred: function(callback) {\r\n      var deferred = when.defer();\r\n\r\n      if (callback) {\r\n        // Callback, if provided, is a simply translated to Promise'esque:\r\n        // (Ensure callback is called outside of promise stack)\r\n        deferred.promise.then(function(res) {\r\n          setTimeout(function(){ callback(null, res) }, 0);\r\n        }, function(err) {\r\n          setTimeout(function(){ callback(err, null); }, 0);\r\n        });\r\n      }\r\n\r\n      return deferred;\r\n  },\r\n\r\n  _timeoutHandler: function(timeout, req, callback) {\r\n    var self = this;\r\n    return function() {\r\n      var timeoutErr = new Error('ETIMEDOUT');\r\n      timeoutErr.code = 'ETIMEDOUT';\r\n\r\n      req._isAborted = true;\r\n      req.abort();\r\n\r\n      callback.call(\r\n        self,\r\n        new Error.ConnectionError({\r\n          message: 'Request aborted due to timeout being reached (' + timeout + 'ms)',\r\n          detail: timeoutErr\r\n        }),\r\n        null\r\n      );\r\n    }\r\n  },\r\n\r\n  _responseHandler: function(res, callback) {\r\n    var self = this;\r\n      \r\n    return function(res) {\r\n      \r\n      if (res.statusCode === 201 || res.statusCode === 202) {\r\n        callback.call(self, null, {\r\n          code: res.statusCode,\r\n          location: res.headers.location\r\n        });\r\n      }\r\n      \r\n      var data = '';      \r\n      res.setEncoding('utf8');\r\n      res.on('data', function(chunk) {\r\n        data += chunk;\r\n      });\r\n      res.on('end', function() {\r\n        try {\r\n                  \r\n          var response = JSON.parse(data);          \r\n          response.code = res.statusCode;\r\n          \r\n          if (response.code > 299) {\r\n            var err;\r\n            if (response.code === 401) {\r\n              err = new Error.AuthenticationError(response.message);\r\n            } else {\r\n              err = Error.ResourceError.generate(response);\r\n            }          \r\n            return callback.call(self, err, null);\r\n          }\r\n          \r\n        } catch (e) {\r\n          return callback.call(\r\n            self,\r\n            new Error.APIError({\r\n              message: 'Invalid JSON received from the NFe.io API',\r\n              response: response,\r\n              exception: e\r\n            }),\r\n            null\r\n          );\r\n        }\r\n        callback.call(self, null, response);\r\n      });\r\n    };\r\n  },\r\n\r\n  _errorHandler: function(req, callback) {\r\n    var self = this;\r\n    return function(error) {\r\n      if (req._isAborted) return; // already handled\r\n      callback.call(\r\n        self,\r\n        new Error.ConnectionError({\r\n          message: 'An error occurred with our connection to NFe.io',\r\n          detail: error\r\n        }),\r\n        null\r\n      );\r\n    }\r\n  },\r\n\r\n  _request: function(method, path, data, auth, callback) {\r\n\r\n    var requestData = JSON.stringify(data || {});\r\n    var self = this;\r\n\r\n    var apiVersion = this._client.getApiField('version');\r\n    var headers = {      \r\n      // Use specified auth token or use default from this stripe instance:\r\n      'Authorization': auth ?\r\n        'Basic ' + new Buffer(auth) : //'Basic ' + new Buffer(auth + ':').toString('base64') :\r\n        this._client.getApiField('auth'),\r\n      'Accept': 'application/json',\r\n      'User-Agent': 'Nfe-io/v1 NodeBindings/' + this._client.getConstant('PACKAGE_VERSION'),\r\n    };\r\n    \r\n    if (method !== 'GET' && data.formData === undefined)\r\n    {\r\n      headers['Content-Type'] = 'application/json';\r\n      //headers['Content-Length'] = Buffer.byteLength(requestData);\r\n    }\r\n    \r\n    if (apiVersion) {\r\n      headers['Nfe-Version'] = apiVersion;\r\n    }\r\n\r\n    // Grab client-user-agent before making the request:\r\n    this._client.getClientUserAgent(function(cua) {\r\n      //headers['X-Nfe-Client-User-Agent'] = cua;\r\n      makeRequest();\r\n    });\r\n\r\n    function makeRequest() {\r\n\r\n      var timeout = self._client.getApiField('timeout'),\r\n          options = {\r\n            host: self._client.getApiField('host'),\r\n            port: self._client.getApiField('port'),\r\n            path: path,\r\n            method: method,\r\n            headers: headers,\r\n            agent: false,\r\n            rejectUnauthorized: false,\r\n            secureOptions: constants.SSL_OP_NO_TLSv1_2,\r\n            strictSSL: false\r\n          };\r\n      \r\n      if (data.formData) {\r\n        options.formData = data;\r\n        requestData = undefined;\r\n      }\r\n            \r\n      var req = (\r\n        self._client.getApiField('protocol') == 'http' ? http : https\r\n      ).request(options);\r\n\r\n      req.setTimeout(timeout, self._timeoutHandler(timeout, req, callback));\r\n      req.on('response', self._responseHandler(req, callback));\r\n      req.on('error', self._errorHandler(req, callback));\r\n\r\n      req.on('socket', function(socket) {\r\n        socket.on('secureConnect', function() {\r\n          if (requestData) {\r\n            req.write(requestData);\r\n          }\r\n          req.end();\r\n        });\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = NfeResource;","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/utils.js":"'use strict';\r\n\r\nvar querystring = require('querystring');\r\n\r\nvar hasOwn = {}.hasOwnProperty;\r\nvar toString = {}.toString;\r\n\r\nvar ARRAY_\r\n\r\nvar utils = module.exports = {\r\n\r\n  isAuthKey: function (key) {\r\n    return typeof key == 'string' && /^(?:[a-z]{2}_)?[A-z0-9]{32}$/.test(key);\r\n  },\r\n\r\n  isObject: function(o) {\r\n    return toString.call(o) === '[object Object]';\r\n  },\r\n\r\n  /**\r\n   * Stringifies an Object, accommodating a single-level of nested objects\r\n   * (forming the conventional key \"parent[child]=value\")\r\n   */\r\n  stringifyRequestData: function(data) {\r\n\r\n    var output = [];\r\n\r\n    for (var i in data) {\r\n      if (hasOwn.call(data, i)) {\r\n        if (utils.isObject(data[i])) {\r\n          var hasProps = false;\r\n          for (var ii in data[i]) {\r\n            if (hasOwn.call(data[i], ii)) {\r\n              hasProps = true;\r\n              output.push(encode(i + '[' + ii + ']') + '=' + encode(data[i][ii]));\r\n            }\r\n          }\r\n          if (!hasProps) {\r\n            output.push(encode(i) + '=' + encode(''));\r\n          }\r\n        } else if (Array.isArray(data[i])) {\r\n          for (var a = 0, l = data[i].length; a < l; ++a) {\r\n            output.push(encode(i + '[]') + '=' + encode(data[i][a]));\r\n          }\r\n        } else {\r\n          output.push(encode(i) + '=' + encode(data[i]));\r\n        }\r\n      }\r\n    }\r\n\r\n    return output.join('&');\r\n\r\n    function encode(v) {\r\n      return v == null ? '' : encodeURIComponent(v);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * https://gist.github.com/padolsey/6008842\r\n   * Outputs a new function with interpolated object property values.\r\n   * Use like so:\r\n   *   var fn = makeURLInterpolator('some/url/{param1}/{param2}');\r\n   *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\r\n   */\r\n  makeURLInterpolator: (function() {\r\n    var rc = {\r\n      '\\n': '\\\\n', '\\\"': '\\\\\\\"',\r\n      '\\u2028': '\\\\u2028', '\\u2029': '\\\\u2029'\r\n    };\r\n    return function makeURLInterpolator(str) {\r\n      return new Function(\r\n        'o',\r\n        'return \"' + (\r\n          str\r\n          .replace(/[\"\\n\\r\\u2028\\u2029]/g, function($0) {\r\n            return rc[$0];\r\n          })\r\n          .replace(/\\{([\\s\\S]+?)\\}/g, '\" + encodeURIComponent(o[\"$1\"]) + \"')\r\n        ) + '\";'\r\n      );\r\n    };\r\n  }()),\r\n\r\n  /**\r\n   * Provide simple \"Class\" extension mechanism\r\n   */\r\n  protoExtend: function(sub) {\r\n    var Super = this;\r\n    var Constructor = hasOwn.call(sub, 'constructor') ? sub.constructor : function() {\r\n      Super.apply(this, arguments);\r\n    };\r\n    Constructor.prototype = Object.create(Super.prototype);\r\n    for (var i in sub) {\r\n      if (hasOwn.call(sub, i)) {\r\n        Constructor.prototype[i] = sub[i];\r\n      }\r\n    }\r\n    for (i in Super) {\r\n      if (hasOwn.call(Super, i)) {\r\n        Constructor[i] = Super[i];\r\n      }\r\n    }\r\n    return Constructor;\r\n  }\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/Error.js":"'use strict';\r\n\r\nvar utils = require('./utils');\r\n\r\nmodule.exports = _Error;\r\n\r\n/**\r\n * Generic Error class to wrap any errors returned by iugu-node\r\n */\r\nfunction _Error(raw) {\r\n  this.populate.apply(this, arguments);\r\n}\r\n\r\n// Extend Native Error\r\n_Error.prototype = Object.create(Error.prototype);\r\n\r\n_Error.prototype.type = 'GenericError';\r\n_Error.prototype.populate = function(type, message) {\r\n  this.type = type;\r\n  this.message = message;\r\n};\r\n\r\n_Error.extend = utils.protoExtend;\r\n\r\n/**\r\n * Create subclass of internal Error class\r\n * (Specifically for errors returned from NFe.io REST API)\r\n */\r\nvar ResourceError = _Error.ResourceError = _Error.extend({\r\n  type: 'ResourceError',\r\n  populate: function(raw) {\r\n\r\n    // Move from prototype def (so it appears in stringified obj)\r\n    this.type = this.type;\r\n\r\n    this.code = raw.code;\r\n    this.message = raw.message;\r\n    this.raw = raw;\r\n  }\r\n});\r\n\r\n/**\r\n * Helper factory which takes raw iugu errors and outputs wrapping instances\r\n */\r\nResourceError.generate = function(raw) {\r\n  \r\n  switch (raw.code) {\r\n      case 400:\r\n        return new _Error.BadRequestError(raw);\r\n        break;\r\n      case 404:\r\n        return new _Error.NotFoundError(raw);\r\n        break;\r\n      case 409:\r\n        return new _Error.ConflictError(raw);\r\n        break;\r\n      default:\r\n        return new _Error.APIError(raw);\r\n        break;\r\n  }\r\n  \r\n  return new _Error('Generic', 'Unknown Error');\r\n};\r\n\r\n// Specific Stripe Error types:\r\n_Error.ConflictError = ResourceError.extend({ type: 'ConflictError' });\r\n_Error.BadRequestError = ResourceError.extend({ type: 'BadRequestError' });\r\n_Error.NotFoundError = ResourceError.extend({ type: 'NotFoundError' });\r\n_Error.APIError = ResourceError.extend({ type: 'APIError' });\r\n_Error.AuthenticationError = ResourceError.extend({ type: 'AuthenticationError' });\r\n_Error.ConnectionError = ResourceError.extend({ type: 'ConnectionError' });\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/BaseResource.Method.js":"'use strict';\r\n\r\nvar path = require('path');\r\nvar utils = require('./utils');\r\n\r\n/**\r\n * Create an API method from the declared spec.\r\n *\r\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\r\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with \r\n *  the instance's path (e.g. \"charges\" or \"customers\")\r\n * @param [spec.required=[]] Array of required arguments in the order that they\r\n *  must be passed by the consumer of the API. Subsequent optional arguments are\r\n *  optionally passed through a hash (Object) as the penultimate argument\r\n *  (preceeding the also-optional callback argument\r\n */\r\nmodule.exports = function nfeMethod(spec) {\r\n\r\n  var commandPath = utils.makeURLInterpolator( spec.path || '' );\r\n  var requestMethod = (spec.method || 'GET').toUpperCase();\r\n  var urlParams = spec.urlParams || [];\r\n\r\n  return function() {\r\n  \r\n    var self = this;\r\n    var args = [].slice.call(arguments);\r\n\r\n    var callback = typeof args[args.length - 1] == 'function' && args.pop();\r\n    var auth = args.length > urlParams.length && utils.isAuthKey(args[args.length - 1]) ? args.pop() : null;\r\n    var data = utils.isObject(args[args.length - 1]) ? args.pop() : {};\r\n    var urlData = this.createUrlData();\r\n\r\n    var deferred = this.createDeferred(callback);\r\n\r\n    for (var i = 0, l = urlParams.length; i < l; ++i) {\r\n      var arg = args[0];\r\n      if (urlParams[i] && !arg) {\r\n        throw new Error('NFe.io: I require argument \"' + urlParams[i] + '\", but I got: ' + arg);\r\n      }\r\n      urlData[urlParams[i]] = args.shift();\r\n    }\r\n\r\n    if (args.length) {\r\n      throw new Error(\r\n        'NFe.io: Unknown arguments (' + args + '). Did you mean to pass an options object? '\r\n      );\r\n    }\r\n\r\n    var requestPath = this.createFullPath(commandPath, urlData);\r\n\r\n    self._request(requestMethod, requestPath, data, auth, function(err, response) {\r\n      if (err) {\r\n        deferred.reject(err);\r\n      } else {\r\n        deferred.resolve(\r\n          spec.transformResponseData ?\r\n            spec.transformResponseData(response) :\r\n            response\r\n        );\r\n      }\r\n    });\r\n\r\n    return deferred.promise;\r\n\r\n  };\r\n};","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/resources/Webhooks.js":"'use strict';\r\n\r\nvar BaseResource = require('../BaseResource');\r\nvar restMethod = BaseResource.method;\r\n\r\nmodule.exports = BaseResource.extend({\r\n  \r\n  path: '/hooks',\r\n  \r\n  create: restMethod({\r\n    method: 'POST'\r\n  }),\r\n\r\n  list: restMethod({\r\n    method: 'GET'\r\n  }),\r\n\r\n  retrieve: restMethod({\r\n    method: 'GET',\r\n    path: '/{id}',\r\n    urlParams: ['id']\r\n  }),\r\n\r\n  update: restMethod({\r\n    method: 'PUT',\r\n    path: '{id}',\r\n    urlParams: ['id']\r\n  }),\r\n\r\n  // Avoid 'delete' keyword in JS\r\n  remove: restMethod({\r\n    method: 'DELETE',\r\n    path: '{id}',\r\n    urlParams: ['id']\r\n  })\r\n\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/resources/LegalPeople.js":"'use strict';\r\n\r\nvar BaseResource = require('../BaseResource');\r\nvar restMethod = BaseResource.method;\r\n\r\nmodule.exports = BaseResource.extend({\r\n  \r\n  path: '/companies/{company_id}/legalpeople',\r\n  \r\n  create: restMethod({\r\n    method: 'POST',\r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  list: restMethod({\r\n    method: 'GET',    \r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  retrieve: restMethod({\r\n    method: 'GET',\r\n    path: '/{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  update: restMethod({\r\n    method: 'PUT',\r\n    path: '{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  // Avoid 'delete' keyword in JS\r\n  remove: restMethod({\r\n    method: 'DELETE',\r\n    path: '{id}',\r\n    urlParams: ['company_id', 'id']\r\n  })\r\n\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/resources/NaturalPeople.js":"'use strict';\r\n\r\nvar BaseResource = require('../BaseResource');\r\nvar restMethod = BaseResource.method;\r\n\r\nmodule.exports = BaseResource.extend({\r\n  \r\n  path: '/companies/{company_id}/naturalpeople',\r\n  \r\n  create: restMethod({\r\n    method: 'POST',\r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  list: restMethod({\r\n    method: 'GET',    \r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  retrieve: restMethod({\r\n    method: 'GET',\r\n    path: '/{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  update: restMethod({\r\n    method: 'PUT',\r\n    path: '{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  // Avoid 'delete' keyword in JS\r\n  remove: restMethod({\r\n    method: 'DELETE',\r\n    path: '{id}',\r\n    urlParams: ['company_id', 'id']\r\n  })\r\n\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/lib/resources/ServiceInvoices.js":"'use strict';\r\n\r\nvar BaseResource = require('../BaseResource');\r\nvar restMethod = BaseResource.method;\r\n\r\nmodule.exports = BaseResource.extend({\r\n\r\n  path: '/companies/{company_id}/serviceinvoices',\r\n    \r\n  create: restMethod({\r\n    method: 'POST',\r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  list: restMethod({\r\n    method: 'GET',\r\n    urlParams: ['company_id']\r\n  }),\r\n\r\n  retrieve: restMethod({\r\n    method: 'GET',\r\n    path: '/{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  cancel: restMethod({\r\n    method: 'DELETE',\r\n    path: '/{id}',\r\n    urlParams: ['company_id', 'id']\r\n  }),\r\n\r\n  downloadPdf : restMethod({\r\n    method: 'GET',\r\n    path: '/pdf',\r\n    urlParams: ['company_id']\r\n  }),\r\n  \r\n  downloadXml : restMethod({\r\n    method: 'GET',\r\n    path: '/xml',\r\n    urlParams: ['company_id']\r\n  })\r\n\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/samples/company-uploadCertificate.js":"var nfeConfig = {\r\n\r\n  // Chave de acesso, você deve copiar exatamente como está no painel.\r\n  apiKey: \"api-key-for-access\",\r\n\r\n  // ID da Empresa, você deve copiar exatamente como está no painel.\r\n  // \tcaso você precise acessar mais de uma empresa, este valor não será útil.\r\n  companyId: \"company-id-from-panel\"\r\n\r\n};\r\nvar nfe = require('nfe-io')(nfeConfig.apiKey);\r\nvar fs = require('fs');\r\n\r\n// Upload do certificado digital para uma empresa\r\nnfe.companies.uploadCertificate(\r\n  \r\n  // ID da empresa que foi copiado do painel.\r\n  nfeConfig.companyId,\r\n  \r\n  {\r\n    formData: {\r\n\r\n      // Senha do certificado digital\r\n      'password': 'certificate_password',\r\n\r\n      // Caminho para o arquivo do certificado digital com extensão PFX ou P12\r\n      'file': fs.createReadStream('path_to_certificate.pfx') \r\n\r\n    }\r\n  },\r\n\r\n  function(err, company) {\r\n  \r\n  \tif (err) console.log('err', err);\r\n  \tif (company) console.log('company', company);\r\n  \r\n  }       \r\n);","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/samples/config.js":"module.exports = {\r\n\r\n  // Chave de acesso, você deve copiar exatamente como está no painel.\r\n  apiKey: \"api-key-for-access\",\r\n\r\n  // ID da Empresa, você deve copiar exatamente como está no painel.\r\n  // \tcaso você precise acessar mais de uma empresa, este valor não será útil.\r\n  companyId: \"company-id-from-panel\"\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/samples/legalPerson-create.js":"var nfeConfig = {\r\n\r\n  // Chave de acesso, você deve copiar exatamente como está no painel.\r\n  apiKey: \"api-key-for-access\",\r\n\r\n  // ID da Empresa, você deve copiar exatamente como está no painel.\r\n  // \tcaso você precise acessar mais de uma empresa, este valor não será útil.\r\n  companyId: \"company-id-from-panel\"\r\n\r\n};\r\nvar nfe = require('nfe-io')(nfeConfig.apiKey);\r\n\r\n// Criar uma pessoa jurídica\r\nnfe.legalPeople.create(\r\n  \r\n  // ID da empresa que foi copiado do painel.\r\n  nfeConfig.companyId,\r\n\r\n  // Dados da pessoa jurídica\r\n  {\r\n    // CNPJ ou CPF (opcional para tomadores no exterior)\r\n    'federalTaxNumber': 00000000000191,\r\n\r\n    // Nome da pessoa física ou Razão Social da Empresa\r\n    'name': 'BANCO DO BRASIL SA',\r\n    \r\n    // Email para onde deverá ser enviado a nota fiscal\r\n    'email': 'exemplo@bb.com.br',\r\n\r\n    // Endereço do tomador\r\n    'address': {\r\n      \r\n      // Código do pais com três letras\r\n      'country': 'BRA',\r\n      \r\n      // CEP do endereço (opcional para tomadores no exterior)\r\n      'postalCode': '70073901',\r\n       \r\n      // Logradouro\r\n      'street': 'Outros Quadra 1 Bloco G Lote 32',\r\n      \r\n      // Número (opcional)\r\n      'number': 'S/N',\r\n      \r\n      // Complemento (opcional) \r\n      'additionalInformation': 'QUADRA 01 BLOCO G',\r\n\r\n      // Bairro\r\n      'district': 'Asa Sul', \r\n\r\n      // Cidade é opcional para tomadores no exterior\r\n      'city': { \r\n          // Código do IBGE para a Cidade\r\n          'code': '5300108',\r\n          // Nome da Cidade\r\n          'name': 'Brasilia'\r\n      },\r\n\r\n      // Sigla do estado (opcional para tomadores no exterior)\r\n      'state': 'DF'\r\n      \r\n    }\r\n  },\r\n\r\n  function(err, legalPeople) {\r\n    \r\n    if (err) console.log('err', err);\r\n    if (legalPeople) console.log('legalPeople', legalPeople);\r\n    \r\n  }\r\n);","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/samples/legalPerson-update.js":"var nfeConfig = {\r\n\r\n  // Chave de acesso, você deve copiar exatamente como está no painel.\r\n  apiKey: \"api-key-for-access\",\r\n\r\n  // ID da Empresa, você deve copiar exatamente como está no painel.\r\n  // \tcaso você precise acessar mais de uma empresa, este valor não será útil.\r\n  companyId: \"company-id-from-panel\"\r\n\r\n};\r\nvar nfe = require('nfe-io')(nfeConfig.apiKey);\r\n\r\n// Atualizar pessoa juridica\r\nnfe.legalPeople.update(\r\n  \r\n  // ID da empresa que foi copiado do painel.\r\n  nfeConfig.companyId,\r\n\r\n  // ID da Pessoa Jurídica \r\n  '5447d23253c8b704d4b48673',\r\n\r\n  // Dados da pessoa jurídica\r\n  {\r\n    // CNPJ ou CPF (opcional para tomadores no exterior)\r\n    'federalTaxNumber': 00000000000191,\r\n\r\n    // Nome da pessoa física ou Razão Social da Empresa\r\n    'name': 'BANCO DO BRASIL SA',\r\n    \r\n    // Email para onde deverá ser enviado a nota fiscal\r\n    'email': 'exemplo@bb.com.br',\r\n\r\n    // Endereço do tomador\r\n    'address': {\r\n      \r\n      // Código do pais com três letras\r\n      'country': 'BRA',\r\n      \r\n      // CEP do endereço (opcional para tomadores no exterior)\r\n      'postalCode': '70073901',\r\n       \r\n      // Logradouro\r\n      'street': 'Outros Quadra 1 Bloco G Lote 32',\r\n      \r\n      // Número (opcional)\r\n      'number': 'S/N',\r\n      \r\n      // Complemento (opcional) \r\n      'additionalInformation': 'QUADRA 01 BLOCO G',\r\n\r\n      // Bairro\r\n      'district': 'Asa Sul', \r\n\r\n      // Cidade é opcional para tomadores no exterior\r\n      'city': { \r\n          // Código do IBGE para a Cidade\r\n          'code': '5300108',\r\n          // Nome da Cidade\r\n          'name': 'Brasilia'\r\n      },\r\n\r\n      // Sigla do estado (opcional para tomadores no exterior)\r\n      'state': 'DF'\r\n      \r\n    }\r\n  },\r\n\r\n  function(err, legalPeople) {\r\n    \r\n    if (err) console.log('err', err);\r\n    if (legalPeople) console.log('legalPeople', legalPeople);\r\n    \r\n  }\r\n);","/home/travis/build/npmtest/node-npmtest-nfe-io/node_modules/nfe-io/samples/serviceInvoice-issue.js":"var nfeConfig = {\r\n\r\n  // Chave de acesso, você deve copiar exatamente como está no painel.\r\n  apiKey: \"api-key-for-access\",\r\n\r\n  // ID da Empresa, você deve copiar exatamente como está no painel.\r\n  // \tcaso você precise acessar mais de uma empresa, este valor não será útil.\r\n  companyId: \"company-id-from-panel\"\r\n\r\n};\r\n\r\nvar nfe = require('nfe-io')(nfeConfig.apiKey);\r\n\r\n// Emitir uma nota fiscal de serviço\r\nnfe.serviceInvoices.create(\r\n\r\n  // ID da empresa que foi copiado do painel.\r\n  nfeConfig.companyId,\r\n\r\n  // Dados da nota fiscal de serviço\r\n  //  neste exemplo contemplamos somente os campos mais utilizado\r\n  //  para saber da estrutura completa veja a documentação completa.\r\n  {  \r\n    // Código do serviço de acordo com o a cidade\r\n    'cityServiceCode': '2690',\r\n    \r\n    // Descrição dos serviços prestados\r\n    'description': 'TESTE EMISSAO',  \r\n\r\n    // Valor total do serviços\r\n    'servicesAmount':  0.01,\r\n\r\n    // Dados do Tomador dos Serviços\r\n    'borrower': {  \r\n\r\n      // CNPJ ou CPF (opcional para tomadores no exterior)\r\n      'federalTaxNumber': 00000000000191,\r\n\r\n      // Nome da pessoa física ou Razão Social da Empresa\r\n      'name': 'BANCO DO BRASIL SA',\r\n      \r\n      // Email para onde deverá ser enviado a nota fiscal\r\n      'email': 'exemplo@bb.com.br',\r\n\r\n      // Endereço do tomador\r\n      'address': {\r\n      \t\r\n      \t// Código do pais com três letras\r\n        'country': 'BRA',\r\n        \r\n        // CEP do endereço (opcional para tomadores no exterior)\r\n        'postalCode': '70073901',\r\n         \r\n        // Logradouro\r\n        'street': 'Outros Quadra 1 Bloco G Lote 32',\r\n        \r\n        // Número (opcional)\r\n        'number': 'S/N',\r\n        \r\n        // Complemento (opcional) \r\n        'additionalInformation': 'QUADRA 01 BLOCO G',\r\n\r\n        // Bairro\r\n        'district': 'Asa Sul', \r\n\r\n\t\t    // Cidade é opcional para tomadores no exterior\r\n        'city': { \r\n            // Código do IBGE para a Cidade\r\n            'code': '5300108',\r\n            // Nome da Cidade\r\n            'name': 'Brasilia'\r\n        },\r\n\r\n        // Sigla do estado (opcional para tomadores no exterior)\r\n        'state': 'DF'\r\n        \r\n      }\r\n    }\r\n  },\r\n\r\n  function(err, invoice) {\r\n    \r\n    if (err) console.log('err', err);\r\n    \r\n    //  O sistema de emissão de notas fiscais é totalmente assincrono\r\n    //  ou seja, nosso servidor recebe as requisições processa elas\r\n    //  conforme a fila de entrada.\r\n    \r\n    //  Você receberá no código HTTP de retorno o valor 202 = Created\r\n    //  juntamente com ele você recebera a URL da localização\r\n    //  da nota fiscal que foi enviada para emissão.\r\n    if (invoice) console.log('invoice', invoice.code, invoice.location);\r\n    \r\n  }\r\n);\r\n\r\n"}